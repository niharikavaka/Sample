name: Upload and Download Repo + Venv

on:
  workflow_dispatch:

jobs:
  Setup_Environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.16'

      - name: Cache Python Virtual Environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-3.10.16

      - name: Save Cache (First Run)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-3.10.16

      - name: Install Dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y zip
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install requests testrail google-api-python-client
     
      - name: List Files Before Upload
        run: |
          ls -la
          ls -la .venv  
          

      - name: Upload Repository and Virtual Environment
        uses: actions/upload-artifact@v4
        with:
          name: repo-and-venv
          path: |
            .venv/
            ./

  Download_Artifacts:
    runs-on: ubuntu-latest
    needs: Setup_Environment  # This ensures it runs after the first job

    steps:
      - name: Download Repository and Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: repo-and-venv
      # - name: Extract Artifacts (if zipped)
      #   run: |
      #     unzip repo-and-venv.zip
      #     ls -la
    

      - name: List Downloaded Files
        run: |
          ls -la
          ls -la repo-and-venv  # Check the folder structure
          ls -la repo-and-venv/.venv  # Verify if .venv exists

          # source .venv/bin/activate
