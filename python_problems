# right triangle star pattern
n=5 
for i in range(1,n+1):
    print("*"*i)

# Inverted Right Triangle Star Pattern   
for i in range(n,0,-1):
    print("*"*i)

# Pyramid Pattern 

# k=1
# for i in range(0,n):
#     print((n-k)*' '+ (i+k) * '*')
#     k+=1   

for i in range(1,n+1):
    print((n-i)*" " +(2*i-1)* '*')  

# Inverted Pyramid Pattern
for i in range(n,0,-1):
    print((n-i)*" " + (i*2-1)*"*")   

#  Number Pyramid
for i in range(1,n+1):
   for j in range(n - i):
        print(" ", end="")    
   for j in range(1,i+1):
       print(j,end="")
       
   print() 

# Floydâ€™s Triangle  -> sequence of natural numbers in a triangle
num =1
for i in range(1,n+1):
    for j in range(1,i+1):
        print(num,end=" ")
        num+=1 
    print()    

# Diamond Star Pattern    
for i in range(1,n+1):
    print((n-i)*" " +(2*i-1)* '*') 
for i in range(n-1,0,-1):
    print((n-i)*" "+(2*i - 1 )* '*')


# Hollow Square Pattern
for i in range(n):
    for j in range(n):
        if i == 0 or i == n-1 or j == 0 or j == n-1:
            print('*', end=' ')
        else:
            print(' ', end=' ')
    print()


# Merge Two Dictionaries ->  ** unpacking operator to merge dictionaries.    
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

merged_dict = {**dict1, **dict2}
print(merged_dict)     

# Invert a Dictionary (Swap Keys and Values) -> by using a dictionary comprehension
my_dict = {'a': 1, 'b': 2, 'c': 3}
inverted_dict={value:key for key,value in my_dict.items()}
print(inverted_dict)


# Capitalize the first and last character of each word in a list.
words = ["my", "name", "isss", "rama"]
new_list= [word[0].capitalize() + word[1:-1] + word[-1].capitalize() if len(word) > 1 else word.capitalize()
        for word in words
    ]  
print(new_list) 

# removing duplicates
list_1=[1,2,1,3,4,4,5,6,2,3,9,10,10]
res=[]
for i in list_1:
    if i not in res:
        res.append(i)
print(res)

for i in list_1:
    if list_1.count(i)>1:
        list_1.remove(i)

# Compressed string
a='aabbccdd'
count=1
b=''
for i in range(len(a)-1):
   if a[i] == a[i+1]:
       count+=1
   else:
       b+=a[i]+str(count)
       count=1
b+=a[i+1]+str(count)       
print(b)    

# Expand ranges
s=('1-3','4-4','5-8','10-15')
res=[]
for i in s:
    temp=i.split("-")
    print(temp)
    for j in range(int(temp[0]),int(temp[-1])+1):
        res.append(j)

print(res)

# Count vowels and consonants
s = "Hello World"
vowels ='aeiou'
v_count = 0
c_count = 0
for char in s.lower():
    if char.isalpha():
        if char in vowels:
            v_count +=1
        else:
                c_count+=1
print(v_count,c_count)      

# longest common prefix
strs = ["flower", "flow", "flight"]
if strs:
    min_str = min(strs, key=len)
    prefix = ""
    for i in range(len(min_str)):
        for string in strs:
            if string[i] != min_str[i]:
                print(prefix)  
                exit() 
        prefix += min_str[i]
    print(prefix) 
else:
    print("") 


# reverse the string
s = "the sky is blue"
sl=s.split()
res=[]
for i in range(len(sl)-1,-1,-1):
    res.append(sl[i])
r=' '.join(res)
print(r)    

# Word frequency counter
s="Radha is a good girl and Radha is a bad girl"
sl=s.split()
d={}
for i in sl:
    if i not in d:
        d[i]=0
    d[i]=d[i]+1
print(d)

# name-number mapping
l=["Ram","Sita","Krishna","Radha"]
n=[100,200,300,400]
d={}
for i in range(len(l)):
    d[l[i]]=n[i]
print(d)

# sorted dict
my_dict = {'a': 3, 'b': 1, 'c': 2}
sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}
print(sorted_dict)  


# total cost of fruits (apple, orange, and banana) based on their quantity, packaging type, and price per pack.
fruits = {"apple":
              {"qty": 200, "pkg_type": "unit", "price_per_pack": 20},
          "orange":
              {"qty": 300, "pkg_type": "pair", "price_per_pack": 30},
          "banana":
              {"qty": 600, "pkg_type": "dozen", "price_per_pack": 50}
          }


total_cost=0
temp=[]
for i in fruits.values():
    temp.append(list(i.values()))

print(temp)
apple_cost=0
orange_cost=0
banana_cost=0
for i in temp:
    if i[1]=="unit":
        total_cost+=i[0]*i[2]
    elif i[1]=="pair":
        total_cost+=(i[0]//2)*i[2]
    elif i[1]=="dozen":
        total_cost+=(i[0]//12)*i[2]

print(total_cost)



              
